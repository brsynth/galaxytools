<tool id="evaluate_manufacturability" name="Evaluate Manufacturability" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.09">
    <description>Evaluate DNA manufacturability with customizable constraints</description>
    <macros>
        <token name="@VERSION_SUFFIX@">1</token>
        <token name="@TOOL_VERSION@">0.2.0</token>
    </macros>
    <requirements>
        <requirement type="package" version="0.1.11">flametree</requirement>
        <requirement type="package" version="1.85"> biopython </requirement>
        <requirement type="package" version="0.1.10">proglog</requirement>
        <requirement type="package" version="3.2.16">dnachisel</requirement>
        <requirement type="package" version="2025.4.15">html2text</requirement>
        <requirement type="package" version="2.0.12">dnacauldron</requirement>
        <requirement type="package" version="2.2.3">pandas</requirement>
        <requirement type="package" version="2.2.5">numpy</requirement>
        <requirement type="package" version="3.1.5">openpyxl</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        #set genbank_file_paths = ','.join([str(f) for f in $genbank_files])

        #set avoid_list = [line.strip() for line in str($avoid_patterns).strip().split('\n') if line.strip()]
        #set avoid_patterns = ','.join(avoid_list)

        #set hairpin_lines = [line.strip() for line in str($adv.hairpin_constraints).strip().split('\n') if line.strip()]
        #set hairpin_parts = []
        #for $line in $hairpin_lines
            #set tokens = dict([item.strip().split('=', 1) for item in $line.split(',')])
            #silent hairpin_parts.append(tokens['stem_size'] + ';' + tokens['hairpin_window'])
        #end for
        #set hairpin_constraints = ' '.join(hairpin_parts)

        #set gc_lines = [line.strip() for line in str($adv.gc_constraints).strip().split('\n') if line.strip()]
        #set gc_parts = []
        #for $line in $gc_lines
            #set tokens = dict([item.strip().split('=', 1) for item in $line.split(',')])
            #silent gc_parts.append(tokens['mini'] + ';' + tokens['maxi'] + ';' + tokens['window'])
        #end for
        #set gc_constraints = ' '.join(gc_parts)

        #set file_name_mapping = ",".join(["%s:%s" % (file.file_name, file.name) for file in $genbank_files])

        mkdir 'outdir_dir' &&
        python '$__tool_directory__/evaluate_manufacturability.py'
            --files_to_evaluate '$genbank_file_paths'
            --file_name_mapping '$file_name_mapping'
            --output_pdf '$report_pdf'
            --output_tsv '$report_tsv'
            --outdir_gb 'outdir_dir'
            --use_file_names_as_id '$adv.use_file_names_as_ids'
            --avoid_patterns '$avoid_patterns'
            --hairpin_constraints '$adv.hairpin_constraints'
            --gc_constraints '$adv.gc_constraints'
            --kmer_size '$adv.kmer_size'
    ]]></command>

    <inputs>
        <param name="genbank_files" type="data_collection" collection_type="list" format="genbank,fasta" label="GenBank File(s)"/>
        <param name="avoid_patterns" type="text" area="true" label="Pattern to Avoid (e.g., BsaI_site and/or 8x1mer)" />
        <section name="adv" title="Advanced Options" expanded="false">
            <param name="hairpin_constraints" type="text" area="true" title="Avoid Hairpins" optional="true"/>
            <param name="gc_constraints" type="text" area="true" title="Enforce GC Content Constraints" optional="true"/>
            <param name="kmer_size" type="integer" label="K-mer Uniqueness Size" value="15" optional="true"/>
            <param name="use_file_names_as_ids" type="boolean" checked="True" label="Use File Names As Sequence IDs" />
        </section>
    </inputs>   
    <outputs>
        <data name="report_pdf" format="pdf" label="Manufacturability Report (PDF)" />
        <data name="report_tsv" format="tsv" label="Manufacturability Report (tsv)" />
        <collection name="annotated_gb" type="list" label="Evaluate Manufacturability (gb)" >
            <discover_datasets pattern="(?P&lt;name&gt;.*).gb" format="genbank" directory="outdir_dir" />
        </collection>
    </outputs>
    <!--test -->
    <!--python evaluate_manufacturability.py -files_to_evaluate 'test-data/10_emma_genbanks/p15_PuroR.gb,test-data/10_emma_genbanks/p9_PuroR.gb,test-data/10_emma_genbanks/p9_mTagBFP2.gb,test-data/10_emma_genbanks/p9_BSDR.gb,test-data/10_emma_genbanks/p8_Linker1.gb,test-data/10_emma_genbanks/p7_L7Ae-Weiss.gb,test-data/10_emma_genbanks/p6_Nt-IgKLsequence.gb,test-data/10_emma_genbanks/p6_Kozak-ATG.gb,test-data/10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb,test-data/10_emma_genbanks/HC_Amp_ccdB.gb' -output_pdf 'report_pdf' -output_tsv 'report_tsv' -use_file_names_as_id 'true' -outdir_gb 'outdir_gb' -avoid_patterns 'BsaI_site,BsmBI_site,BbsI_site,SapI_site,8x1mer,5x3mer,9x2mer' -hairpin_constraints '20;100' -gc_constraints '0.3;0.7;100 0.1;0.9;100' -kmer_size '15'
    impossible to run it in conda env with this comand because there is a step to extract the the file name in galaxy (.dat) in line 83 of the python code-->
    <tests>
        <test> 
            <param name="genbank_files">
                <collection type="list">
                    <element name="p15_PuroR" value="10_emma_genbanks/p15_PuroR.gb" />
                    <element name="p9_PuroR" value="10_emma_genbanks/p9_PuroR.gb" />
                    <element name="p9_mTagBFP2" value="10_emma_genbanks/p9_mTagBFP2.gb" />
                    <element name="p9_BSDR" value="10_emma_genbanks/p9_BSDR.gb" />
                    <element name="p8_Linker1" value="10_emma_genbanks/p8_Linker1.gb" />
                    <element name="p7_L7Ae-Weiss" value="10_emma_genbanks/p7_L7Ae-Weiss.gb" />
                    <element name="p6_Nt-IgKLsequence" value="10_emma_genbanks/p6_Nt-IgKLsequence.gb" />
                    <element name="p6_Kozak-ATG" value="10_emma_genbanks/p6_Kozak-ATG.gb" />
                    <element name="p4_Kt-L7Ae-Weiss" value="10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb" />
                    <element name="HC_Amp_ccdB" value="10_emma_genbanks/HC_Amp_ccdB.gb" />
                </collection>
            </param>
            <param name="adv|use_file_names_as_ids" value="True" />
            <!-- AvoidPatterns -->
            <param name="avoid_patterns" value="BsaI_site
            BsmBI_site
            BbsI_site
            SapI_site
            8x1mer
            5x3mer
            9x2mer" />
            <!-- AvoidHairpins -->
            <param name="adv|hairpin_constraints" value='stem_size=20, hairpin_window=200'/>
            <!-- EnforceGCContent -->
            <param name="adv|gc_constraints" value="mini=0.3, maxi=0.7, window=100
            mini=0.1, maxi=0.9, window=100"/>
            <!-- UniquifyAllKmers -->
            <param name="adv|kmer_size" value="15" />
            <!-- Expecting pdf output -->
            <output name="report_pdf" ftype="pdf">
                <assert_contents>
                    <has_size min="1"/>
                </assert_contents>
            </output>
            <!-- Expecting tsv output -->
            <output name="report_tsv" ftype="tsv">
                <assert_contents>
                    <has_n_lines n="11" />
                    <has_n_columns n="12" />
                </assert_contents>
            </output>
            <output_collection name="annotated_gb" type="list" count="10">
                <element name="HC_Amp_ccdB">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p15_PuroR">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p4_Kt-L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="120" />
                    </assert_contents>
                </element>
                <element name="p6_Kozak-ATG">
                    <assert_contents>
                     <has_n_lines n="124" />
                    </assert_contents>
                </element>
                <element name="p6_Nt-IgKLsequence">
                    <assert_contents>
                     <has_n_lines n="131" />
                    </assert_contents>
                </element>
                <element name="p7_L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="130" />
                    </assert_contents>
                </element>
                <element name="p8_Linker1">
                    <assert_contents>
                     <has_n_lines n="117" />
                    </assert_contents>
                </element>
                <element name="p9_BSDR">
                    <assert_contents>
                     <has_n_lines n="136" />
                    </assert_contents>
                </element>
                <element name="p9_mTagBFP2">
                    <assert_contents>
                     <has_n_lines n="147" />
                    </assert_contents>
                </element>
                <element name="p9_PuroR">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
Evaluate Manufacturability
===========================

Get plots of patterns impacting synthesis and assembly difficulty deppanding on a set of constraints. I based on dnachisel package (complete documentation `here <https://edinburgh-genome-foundry.github.io/DnaChisel/index.html>`_ )

**Parameters**:
---------------
* **GenBank File(s)**: List of GenBank files to be processed.
* **Avoid Pattern Constraints**: 
    It is a sequence design rules that can be used as constraints. It define pattern(s) to avoid during problem optimisation.
    This can include enzyme sites like "BsaI_site", "NotI_site", "XbaI_site"... `enzyme dict <https://github.com/biopython/biopython/blob/master/Bio/Restriction/Restriction_Dictionary.py>`_ . Custom patterns are also supported, such as "5x3mer" means "any 5 consecutive 3-nucleotide sequences — typically 5 unique 3-mers in a row.
* **Enforce GC Content Constraints**: Define acceptable GC content ranges. For example min: 0.4, max: 0.6, window: 50 represents a 40–60% GC content requirement within a 50-base window.
* **Avoid Hairpins**: 
    Avoid Hairpin patterns as defined by the IDT guidelines.
    A hairpin is defined by a sequence segment which has a reverse complement “nearby” in a given window.
* **K-mer Uniqueness Size**: Avoid sub-sequence of length k with homologies elsewhere.
* **Use File Names As Sequence IDs**: Recommended if the GenBank file names represent the fragment names.
    ]]></help>
    <citations>
        <citation type="bibtex">
            @unpublished{evaluate_manufacturability
                author = {Ramiz Khaled},
                title = {{evaluate_manufacturability}},
                url = {https://github.com/Edinburgh-Genome-Foundry/Examples/blob/master/templates/template1.ipynb},
            }
        </citation>
    </citations>
</tool>
