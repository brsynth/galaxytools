<tool id="evaluate_manufacturability" name="Evaluate Manufacturability" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.09">
    <description>Evaluate DNA manufacturability with customizable constraints</description>
    <macros>
        <token name="@VERSION_SUFFIX@">2</token>
        <token name="@TOOL_VERSION@">0.3.0</token>
    </macros>
    <requirements>
        <requirement type="package" version="0.1.11">flametree</requirement>
        <requirement type="package" version="1.85"> biopython </requirement>
        <requirement type="package" version="0.1.10">proglog</requirement>
        <requirement type="package" version="3.2.16">dnachisel</requirement>
        <requirement type="package" version="2025.4.15">html2text</requirement>
        <requirement type="package" version="2.0.12">dnacauldron</requirement>
        <requirement type="package" version="2.2.3">pandas</requirement>
        <requirement type="package" version="2.2.5">numpy</requirement>
        <requirement type="package" version="3.1.5">openpyxl</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        #if $setting.mode == 'wkf':
            #if $setting.genbank_files:
                #set genbank_file_paths = ','.join([str(f) for f in $setting.genbank_files])
                #set file_name_mapping = ",".join(["%s:%s" % (file.file_name, file.name) for file in $setting.genbank_files])
            #else: 
                #set genbank_file_paths = ''
                #set file_name_mapping = ''
            #end if
            #set DB_genbank_file_paths = ','.join([str(file) for file in $setting.DB_genbank_files])
            #set DB_file_name_mapping = ",".join(["%s:%s" % (file.file_name, file.name) for file in $setting.DB_genbank_files])
        #else:
            #set genbank_file_paths = ','.join([str(f) for f in $setting.genbank_files])
            #set file_name_mapping = ",".join(["%s:%s" % (file.file_name, file.name) for file in $setting.genbank_files])
            #set DB_genbank_file_paths = ''
            #set DB_file_name_mapping = ''
        #end if

        #if str($json_use.use_json_param) == "false":
            #set avoid_list = [line.strip() for line in str($json_use.avoid_patterns).strip().split('\n') if line.strip()]
            #set avoid_patterns = ','.join(avoid_list)

            #set hairpin_lines = [line.strip() for line in str($json_use.hairpin_constraints).strip().split('\n') if line.strip()]
            #set hairpin_constraints = '__cn__'.join($hairpin_lines)

            #set gc_lines = [line.strip() for line in str($json_use.gc_constraints).strip().split('\n') if line.strip()]
            #set gc_constraints = '__cn__'.join($gc_lines)

            #set kmer_size = $json_use.kmer_size
        #else:
            #set avoid_patterns = ''
            #set hairpin_constraints = ''
            #set gc_constraints = ''
            #set kmer_size = ''
        #end if

        mkdir 'outdir_dir' &&
        python '$__tool_directory__/evaluate_manufacturability.py'
            --use_json_param '$json_use.use_json_param'
            --files_to_evaluate '$genbank_file_paths'
            --file_name_mapping '$file_name_mapping'
            --mode '$mode'
            #if $setting.mode=='wkf':
                --DB_report '$setting.DB_report'
                --DB_genbank_files '$DB_genbank_file_paths'
                --DB_file_name_mapping '$DB_file_name_mapping'
            #else:
                --DB_report ''
                --DB_genbank_files ''
                --DB_file_name_mapping ''
            #end if
            --output_pdf '$report_pdf'
            --output_tsv '$report_tsv'
            --outdir_gb 'outdir_dir'
            --use_file_names_as_id '$use_file_names_as_ids'
            --avoid_patterns '$avoid_patterns'
            --hairpin_constraints '$hairpin_constraints'
            --gc_constraints '$gc_constraints'
            --kmer_size '$kmer_size'
            #if $json_use.use_json_param:
                --json_params '$json_use.json_params'
            #else:
                --json_params ''
            #end if && echo 'DEBUG' && "$DB_genbank_files"
    ]]></command>

    <inputs>
        <conditional name='setting'>
            <param name="mode" type="select" label="Mode">
                <option value="std" selected="true">Standard</option>
                <option value="wkf">Workflow</option>
            </param>
            <when value="std">
                <param name="genbank_files" type="data_collection" collection_type="list" format="genbank,fasta" label="GenBank File(s)"/>
            </when>
            <when value="wkf">
                <param name="genbank_files" type="data_collection" collection_type="list" format="genbank,fasta" label="GenBank File(s)" optional="true"/>
                <param name="DB_genbank_files" type="data_collection" collection_type="list" format="genbank,fasta" label="DB GenBank File(s)"/>
                <param name="DB_report" type="data" format="txt" label="Missing Fragments Report" help="text file report" />
            </when>
        </conditional>
        <conditional name='json_use'>
            <param name="use_json_param" type="boolean" checked="false" label="Use parameter from a JSON file" />
            <when value="false">
                <param name="avoid_patterns" type="text" area="true" label="Avoid Pattern Constraints" help="Each pattern on a line" />
                <param name="hairpin_constraints" type="text" area="true" label="Hairpins Constraints" optional="true" help="e.g. (you can add others Hairpins Constraints on a new line): stem_size=20, hairpin_window=200"/>
                <param name="gc_constraints" type="text" area="true" label="Enforce GC Content Constraints" optional="true" help="e.g. (you can add others Enforce GC Content Constraints on a new line): mini=0.3, maxi=0.7, window=100"/>
                <param name="kmer_size" type="integer" label="K-mer Uniqueness Size" value="" optional="true" help="e.g.: 15"/>
            </when>
            <when value="true">
                <param name="json_params" type="data" format="json" optional="true" label="JSON parameters file" help="Contains tool's parameters" />
            </when>
        </conditional>
        <param name="use_file_names_as_ids" type="boolean" checked="True" label="Use File Names As Sequence IDs" />
    </inputs>   
    <outputs>
        <data name="report_pdf" format="pdf" label="Manufacturability Report (PDF)" />
        <data name="report_tsv" format="tsv" label="Manufacturability Report (tsv)" />
        <collection name="annotated_gb" type="list" label="Evaluate Manufacturability (gb)" >
            <discover_datasets pattern="(?P&lt;name&gt;.*).gb" format="genbank" directory="outdir_dir" />
        </collection>
    </outputs>
    <!--test -->
    <!--python evaluate_manufacturability.py -files_to_evaluate 'test-data/10_emma_genbanks/p15_PuroR.gb,test-data/10_emma_genbanks/p9_PuroR.gb,test-data/10_emma_genbanks/p9_mTagBFP2.gb,test-data/10_emma_genbanks/p9_BSDR.gb,test-data/10_emma_genbanks/p8_Linker1.gb,test-data/10_emma_genbanks/p7_L7Ae-Weiss.gb,test-data/10_emma_genbanks/p6_Nt-IgKLsequence.gb,test-data/10_emma_genbanks/p6_Kozak-ATG.gb,test-data/10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb,test-data/10_emma_genbanks/HC_Amp_ccdB.gb' -output_pdf 'report_pdf' -output_tsv 'report_tsv' -use_file_names_as_id 'true' -outdir_gb 'outdir_gb' -avoid_patterns 'BsaI_site,BsmBI_site,BbsI_site,SapI_site,8x1mer,5x3mer,9x2mer' -hairpin_constraints '20;100' -gc_constraints '0.3;0.7;100 0.1;0.9;100' -kmer_size '15'
    impossible to run it in conda env with this comand because there is a step to extract the the file name in galaxy (.dat) in line 83 of the python code-->
    <tests>
        <test> 
            
            <param name="use_file_names_as_ids" value="True" />
            <conditional name='json_use'>
                <param name="use_json_param" value="false" />
                <!-- AvoidPatterns -->
                <param name="avoid_patterns" value="BsaI_site
                BsmBI_site
                BbsI_site
                SapI_site
                8x1mer
                5x3mer
                9x2mer" />
                <!-- AvoidHairpins -->
                <param name="hairpin_constraints" value='stem_size=20, hairpin_window=200'/>
                <!-- EnforceGCContent -->
                <param name="gc_constraints" value="mini=0.3, maxi=0.7, window=100
                mini=0.1, maxi=0.9, window=100"/>
                <!-- UniquifyAllKmers -->
                <param name="kmer_size" value="15" />
            </conditional>
            <conditional name='setting'>
                <param name="mode" value="std"/>
                <param name="genbank_files">
                    <collection type="list">
                        <element name="p8_Linker1" value="10_emma_genbanks/p8_Linker1.gb" />
                        <element name="p9_PuroR" value="10_emma_genbanks/p9_PuroR.gb" />
                        <element name="p9_mTagBFP2" value="10_emma_genbanks/p9_mTagBFP2.gb" />
                        <element name="p4_Kt-L7Ae-Weiss" value="10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb" />
                        <element name="p6_Nt-IgKLsequence" value="10_emma_genbanks/p6_Nt-IgKLsequence.gb" />
                        <element name="HC_Amp_ccdB" value="10_emma_genbanks/HC_Amp_ccdB.gb" />
                        <element name="p15_PuroR" value="10_emma_genbanks/p15_PuroR.gb" />
                        <element name="p9_BSDR" value="10_emma_genbanks/p9_BSDR.gb" />
                        <element name="p6_Kozak-ATG" value="10_emma_genbanks/p6_Kozak-ATG.gb" />
                        <element name="p7_L7Ae-Weiss" value="10_emma_genbanks/p7_L7Ae-Weiss.gb" />
                    </collection>
                </param>
            </conditional>
            <!-- Expecting pdf output -->
            <output name="report_pdf" ftype="pdf">
                <assert_contents>
                    <has_size min="86"/>
                </assert_contents>
            </output>
            <!-- Expecting tsv output -->
            <output name="report_tsv" file='manufacturability_report.tsv' ftype="tsv">
                <assert_contents>
                    <has_n_lines n="11" />
                    <has_n_columns n="12" />
                </assert_contents>
            </output>
            <output_collection name="annotated_gb" type="list" count="10">
                <element name="HC_Amp_ccdB">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p15_PuroR">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p4_Kt-L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="120" />
                    </assert_contents>
                </element>
                <element name="p6_Kozak-ATG">
                    <assert_contents>
                     <has_n_lines n="124" />
                    </assert_contents>
                </element>
                <element name="p6_Nt-IgKLsequence">
                    <assert_contents>
                     <has_n_lines n="131" />
                    </assert_contents>
                </element>
                <element name="p7_L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="130" />
                    </assert_contents>
                </element>
                <element name="p8_Linker1">
                    <assert_contents>
                     <has_n_lines n="117" />
                    </assert_contents>
                </element>
                <element name="p9_BSDR">
                    <assert_contents>
                     <has_n_lines n="136" />
                    </assert_contents>
                </element>
                <element name="p9_mTagBFP2">
                    <assert_contents>
                     <has_n_lines n="147" />
                    </assert_contents>
                </element>
                <element name="p9_PuroR">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- parameters from json -->
        <test> 
            <param name="use_file_names_as_ids" value="True" />
            <conditional name='json_use'>
                <param name="use_json_param" value="true" />
                <!-- JSON -->
                <param name="json_params" value="test_json.json" />
            </conditional>
            <conditional name='setting'>
                <param name="mode" value="std"/>
                <param name="genbank_files">
                    <collection type="list">
                        <element name="p8_Linker1" value="10_emma_genbanks/p8_Linker1.gb" />
                        <element name="p9_PuroR" value="10_emma_genbanks/p9_PuroR.gb" />
                        <element name="p9_mTagBFP2" value="10_emma_genbanks/p9_mTagBFP2.gb" />
                        <element name="p4_Kt-L7Ae-Weiss" value="10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb" />
                        <element name="p6_Nt-IgKLsequence" value="10_emma_genbanks/p6_Nt-IgKLsequence.gb" />
                        <element name="HC_Amp_ccdB" value="10_emma_genbanks/HC_Amp_ccdB.gb" />
                        <element name="p15_PuroR" value="10_emma_genbanks/p15_PuroR.gb" />
                        <element name="p9_BSDR" value="10_emma_genbanks/p9_BSDR.gb" />
                        <element name="p6_Kozak-ATG" value="10_emma_genbanks/p6_Kozak-ATG.gb" />
                        <element name="p7_L7Ae-Weiss" value="10_emma_genbanks/p7_L7Ae-Weiss.gb" />
                    </collection>
                </param>
            </conditional>
            <!-- Expecting pdf output -->
            <output name="report_pdf" ftype="pdf">
                <assert_contents>
                    <has_size min="86"/>
                </assert_contents>
            </output>
            <!-- Expecting tsv output -->
            <output name="report_tsv" file='manufacturability_report.tsv' ftype="tsv">
                <assert_contents>
                    <has_n_lines n="11" />
                    <has_n_columns n="12" />
                </assert_contents>
            </output>
            <output_collection name="annotated_gb" type="list" count="10">
                <element name="HC_Amp_ccdB">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p15_PuroR">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p4_Kt-L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="120" />
                    </assert_contents>
                </element>
                <element name="p6_Kozak-ATG">
                    <assert_contents>
                     <has_n_lines n="124" />
                    </assert_contents>
                </element>
                <element name="p6_Nt-IgKLsequence">
                    <assert_contents>
                     <has_n_lines n="131" />
                    </assert_contents>
                </element>
                <element name="p7_L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="130" />
                    </assert_contents>
                </element>
                <element name="p8_Linker1">
                    <assert_contents>
                     <has_n_lines n="117" />
                    </assert_contents>
                </element>
                <element name="p9_BSDR">
                    <assert_contents>
                     <has_n_lines n="136" />
                    </assert_contents>
                </element>
                <element name="p9_mTagBFP2">
                    <assert_contents>
                     <has_n_lines n="147" />
                    </assert_contents>
                </element>
                <element name="p9_PuroR">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!--test wkf mode simulation-->
        <!--NO missing-->
        <test> 
            <param name="use_file_names_as_ids" value="True" />
            <conditional name='json_use'>
                <param name="use_json_param" value="false" />
                <!-- AvoidPatterns -->
                <param name="avoid_patterns" value="BsaI_site
                BsmBI_site
                BbsI_site
                SapI_site
                8x1mer
                5x3mer
                9x2mer" />
                <!-- AvoidHairpins -->
                <param name="hairpin_constraints" value='stem_size=20, hairpin_window=200'/>
                <!-- EnforceGCContent -->
                <param name="gc_constraints" value="mini=0.3, maxi=0.7, window=100
                mini=0.1, maxi=0.9, window=100"/>
                <!-- UniquifyAllKmers -->
                <param name="kmer_size" value="15" />
            </conditional>
            <conditional name='setting'>
                <param name="mode" value="wkf"/>
                <param name="DB_genbank_files">
                    <collection type="list">
                        <element name="p3_2_CAG" value="DB_genbank_simulation/p3_2_CAG.gb" />
                        <element name="p16_bGHpolyA" value="DB_genbank_simulation/p16_bGHpolyA.gb" />
                        <element name="p19_mNeoGreen" value="DB_genbank_simulation/p19_mNeoGreen.gb" />
                    </collection>
                </param>
                <param name="DB_report" value="NO_missing.txt" />
            </conditional>
            <output_collection name="annotated_gb" type="list" count="3">
                <element name="p16_bGHpolyA">
                    <assert_contents>
                     <has_n_lines n="24" />
                    </assert_contents>
                </element>
                <element name="p19_mNeoGreen">
                    <assert_contents>
                     <has_n_lines n="44" />
                    </assert_contents>
                </element>
                <element name="p3_2_CAG">
                    <assert_contents>
                     <has_n_lines n="33" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!--missing with no providing gb fragment files-->
        <!--should return error (faild)-->
        <test> 
            <param name="use_file_names_as_ids" value="True" />
            <conditional name='json_use'>
                <param name="use_json_param" value="false" />
                <!-- AvoidPatterns -->
                <param name="avoid_patterns" value="BsaI_site
                BsmBI_site
                BbsI_site
                SapI_site
                8x1mer
                5x3mer
                9x2mer" />
                <!-- AvoidHairpins -->
                <param name="hairpin_constraints" value='stem_size=20, hairpin_window=200'/>
                <!-- EnforceGCContent -->
                <param name="gc_constraints" value="mini=0.3, maxi=0.7, window=100
                mini=0.1, maxi=0.9, window=100"/>
                <!-- UniquifyAllKmers -->
                <param name="kmer_size" value="15" />
            </conditional>
            <conditional name='setting'>
                <param name="mode" value="wkf"/>
                <param name="genbank_files">
                    <collection type="list">
                        <element name="p15_PuroR" value="10_emma_genbanks/p15_PuroR.gb" />
                        <element name="p9_PuroR" value="10_emma_genbanks/p9_PuroR.gb" />
                        <element name="p9_mTagBFP2" value="10_emma_genbanks/p9_mTagBFP2.gb" />
                        <element name="p9_BSDR" value="10_emma_genbanks/p9_BSDR.gb" />
                         <element name="HC_Amp_ccdB" value="10_emma_genbanks/HC_Amp_ccdB.gb" />
                        <element name="p8_Linker1" value="10_emma_genbanks/p8_Linker1.gb" />
                        <element name="p7_L7Ae-Weiss" value="10_emma_genbanks/p7_L7Ae-Weiss.gb" />
                    </collection>
                </param>
                <param name="DB_genbank_files">
                    <collection type="list">
                        <element name="p3_2_CAG" value="DB_genbank_simulation/p3_2_CAG.gb" />
                        <element name="p16_bGHpolyA" value="DB_genbank_simulation/p16_bGHpolyA.gb" />
                        <element name="p19_mNeoGreen" value="DB_genbank_simulation/p19_mNeoGreen.gb" />
                    </collection>
                </param>
                <param name="DB_report" value="missing.txt" />
            </conditional>
            <!-- Expecting pdf output -->
            <output name="report_pdf" ftype="pdf">
                <assert_contents>
                    <has_size min="86"/>
                </assert_contents>
            </output>
            <!-- Expecting tsv output -->
            <output name="report_tsv" ftype="tsv">
                <assert_contents>
                    <has_n_lines n="11" />
                    <has_n_columns n="12" />
                </assert_contents>
            </output>
            <output_collection name="annotated_gb" type="list" count="10">
                <element name="HC_Amp_ccdB">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p15_PuroR">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p4_Kt-L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="120" />
                    </assert_contents>
                </element>
                <element name="p6_Kozak-ATG">
                    <assert_contents>
                     <has_n_lines n="124" />
                    </assert_contents>
                </element>
                <element name="p6_Nt-IgKLsequence">
                    <assert_contents>
                     <has_n_lines n="131" />
                    </assert_contents>
                </element>
                <element name="p7_L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="130" />
                    </assert_contents>
                </element>
                <element name="p3_2_CAG">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
                <element name="p16_bGHpolyA">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
                <element name="p19_mNeoGreen">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!--missing with providing gb fragment files-->
        <test> 
            <param name="use_file_names_as_ids" value="True" />
            <conditional name='json_use'>
                <param name="use_json_param" value="false" />
                <!-- AvoidPatterns -->
                <param name="avoid_patterns" value="BsaI_site
                BsmBI_site
                BbsI_site
                SapI_site
                8x1mer
                5x3mer
                9x2mer" />
                <!-- AvoidHairpins -->
                <param name="hairpin_constraints" value='stem_size=20, hairpin_window=200'/>
                <!-- EnforceGCContent -->
                <param name="gc_constraints" value="mini=0.3, maxi=0.7, window=100
                mini=0.1, maxi=0.9, window=100"/>
                <!-- UniquifyAllKmers -->
                <param name="kmer_size" value="15" />
            </conditional>
            <conditional name='setting'>
                <param name="mode" value="wkf"/>
                <param name="genbank_files">
                    <collection type="list">
                        <element name="p8_Linker1" value="10_emma_genbanks/p8_Linker1.gb" />
                        <element name="p9_PuroR" value="10_emma_genbanks/p9_PuroR.gb" />
                        <element name="p9_mTagBFP2" value="10_emma_genbanks/p9_mTagBFP2.gb" />
                        <element name="p4_Kt-L7Ae-Weiss" value="10_emma_genbanks/p4_Kt-L7Ae-Weiss.gb" />
                        <element name="p6_Nt-IgKLsequence" value="10_emma_genbanks/p6_Nt-IgKLsequence.gb" />
                        <element name="HC_Amp_ccdB" value="10_emma_genbanks/HC_Amp_ccdB.gb" />
                        <element name="p15_PuroR" value="10_emma_genbanks/p15_PuroR.gb" />
                        <element name="p9_BSDR" value="10_emma_genbanks/p9_BSDR.gb" />
                        <element name="p6_Kozak-ATG" value="10_emma_genbanks/p6_Kozak-ATG.gb" />
                        <element name="p7_L7Ae-Weiss" value="10_emma_genbanks/p7_L7Ae-Weiss.gb" />
                    </collection>
                </param>
                <param name="DB_genbank_files">
                    <collection type="list">
                        <element name="p3_2_CAG" value="DB_genbank_simulation/p3_2_CAG.gb" />
                        <element name="p16_bGHpolyA" value="DB_genbank_simulation/p16_bGHpolyA.gb" />
                        <element name="p19_mNeoGreen" value="DB_genbank_simulation/p19_mNeoGreen.gb" />
                    </collection>
                </param>
                <param name="DB_report" value="missing.txt" />
            </conditional>
            <!-- Expecting pdf output -->
            <output name="report_pdf" ftype="pdf">
                <assert_contents>
                    <has_size min="86"/>
                </assert_contents>
            </output>
            <!-- Expecting tsv output -->
            <output name="report_tsv" file='manufacturability_report.tsv' ftype="tsv">
                <assert_contents>
                    <has_n_lines n="11" />
                    <has_n_columns n="12" />
                </assert_contents>
            </output>
            <output_collection name="annotated_gb" type="list" count="13">
                <element name="HC_Amp_ccdB">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p15_PuroR">
                    <assert_contents>
                     <has_n_lines n="150" />
                    </assert_contents>
                </element>
                <element name="p4_Kt-L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="120" />
                    </assert_contents>
                </element>
                <element name="p6_Kozak-ATG">
                    <assert_contents>
                     <has_n_lines n="124" />
                    </assert_contents>
                </element>
                <element name="p6_Nt-IgKLsequence">
                    <assert_contents>
                     <has_n_lines n="131" />
                    </assert_contents>
                </element>
                <element name="p7_L7Ae-Weiss">
                    <assert_contents>
                     <has_n_lines n="130" />
                    </assert_contents>
                </element>
                <element name="p8_Linker1">
                    <assert_contents>
                     <has_n_lines n="117" />
                    </assert_contents>
                </element>
                <element name="p9_BSDR">
                    <assert_contents>
                     <has_n_lines n="136" />
                    </assert_contents>
                </element>
                <element name="p9_mTagBFP2">
                    <assert_contents>
                     <has_n_lines n="147" />
                    </assert_contents>
                </element>
                <element name="p9_PuroR">
                    <assert_contents>
                     <has_n_lines n="138" />
                    </assert_contents>
                </element>
                <element name="p3_2_CAG">
                    <assert_contents>
                     <has_n_lines n="33" />
                    </assert_contents>
                </element>
                <element name="p16_bGHpolyA">
                    <assert_contents>
                     <has_n_lines n="24" />
                    </assert_contents>
                </element>
                <element name="p19_mNeoGreen">
                    <assert_contents>
                     <has_n_lines n="44" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
Evaluate Manufacturability
===========================

Get plots of patterns impacting synthesis and assembly difficulty deppanding on a set of constraints. I based on dnachisel package (complete documentation `here <https://edinburgh-genome-foundry.github.io/DnaChisel/index.html>`_ )

**Parameters**:
---------------
* **Mode**: 
    This option allows you to choose the mode in which the tool will be executed:
        - Standard: Runs the tool as a standalone application.
        - Workflow: Adds additional options to make the tool more flexible and interactive within a workflow.
* **GenBank File(s)**: List of GenBank files to be processed.
* **Use parameter from a JSON file**: 
    Yes/No parameter to indicate if user want to set parameter manually or using a json file
    If Yes, user should provide a JSON file contains all parameters
* **Avoid Pattern Constraints**: 
    It is a sequence design rules that can be used as constraints. It define pattern(s) to avoid during problem optimisation 
    This can include enzyme sites like "BsaI_site", "NotI_site", "XbaI_site"... `enzyme dict <https://github.com/biopython/biopython/blob/master/Bio/Restriction/Restriction_Dictionary.py>`_ . Custom patterns are also supported, such as "5x3mer" means "any 5 consecutive 3-nucleotide sequences — typically 5-repeats 3-mers in a row.
    In case on using more than one pattern, each one msut be on a ligne.
* **Enforce GC Content Constraints**: 
    Define acceptable GC content ranges. For example min=0.4, max=0.6, window=50 represents a 40–60% GC content requirement within a 50-base window.
    (Parameters: `EnforceGCContent_params <https://edinburgh-genome-foundry.github.io/DnaChisel/ref/builtin_specifications#enforcegccontent>`_ )
    In case on using more than one combination, each one msut be on a ligne.
* **Avoid Hairpins**: 
    Avoid Hairpin patterns as defined by the IDT guidelines.
    A hairpin is defined by a sequence segment which has a reverse complement “nearby” in a given window.
    (Parameters: `AvoidHairpins__params <https://edinburgh-genome-foundry.github.io/DnaChisel/ref/builtin_specifications#avoidhairpins>`_ ).
    In case on using more than one combination, each one msut be on a ligne.
* **K-mer Uniqueness Size**: Avoid sub-sequence of length k with homologies elsewhere.
* **Use File Names As Sequence IDs**: Recommended if the GenBank file names represent the fragment names.

**DEMO **
----------

 Executes the tool in standard mode using default parameters tailored to the test dataset.

 To start a demo you need to download the test dataset and the defaulte parameter aapted:

 - **GenBank File(s):** `Download GenBank files <https://files.osf.io/v1/resources/235de/providers/osfstorage/6894678c16b49a3aaeb067c9/?zip=>`_

    **Note:** Make GenBank files as a collection list.  
    `How to make collection <https://training.galaxyproject.org/training-material/topics/galaxy-interface/tutorials/collections/tutorial.html>`_
 
 - **Default Parameters:** Thy are provided `here <https://osf.io/download/689467ddc9ee0bb750f62d86/>`_ as JSON file (Enabel the Use parameter from a JSON file option)
    ]]></help>
    <citations>
        <citation type="bibtex">
            @unpublished{evaluate_manufacturability
                author = {Ramiz Khaled},
                title = {{evaluate_manufacturability}},
                url = {https://github.com/Edinburgh-Genome-Foundry/Examples/blob/master/templates/template1.ipynb},
            }
        </citation>
    </citations>
</tool>
